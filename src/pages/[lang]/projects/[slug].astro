---
import Base from "@/layouts/BaseLayout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { isLocale, SUPPORTED_LOCALES, type Locale, t } from "@/lib/i18n";
import { projectsByLocale, getProjectBySlug } from "@/data/projects";

export async function getStaticPaths() {
  return SUPPORTED_LOCALES.flatMap((locale) =>
    projectsByLocale[locale].map((project) => ({
      params: { lang: locale, slug: project.slug },
    }))
  );
}
export const prerender = true;

const { lang, slug } = Astro.params as { lang: Locale; slug: string };
if (!lang || !isLocale(lang)) { throw new Error("Invalid locale"); }
const project = getProjectBySlug(lang, slug);
if (!project) { throw new Error("Project not found"); }

const title = `${project.title} · ${project.tagline}`;
const url = Astro.url.href;
const siteOrigin = Astro.site ?? (url ? new URL(url).origin : undefined);
const toAbsolute = (value: string) => {
  try {
    return siteOrigin ? new URL(value, siteOrigin).toString() : new URL(value).toString();
  } catch {
    return value;
  }
};

const canonical = toAbsolute(url);
const image = toAbsolute(project.image);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "CreativeWork",
  name: project.title,
  description: project.summary,
  image,
  headline: project.tagline,
  datePublished: `${project.year}-01-01`,
  inLanguage: lang,
  url: canonical,
};
---
<Base title={title} desc={project.summary} url={url} lang={lang} image={image} canonical={canonical} structuredData={structuredData}>
  <Header lang={lang} />
  <main class="container py-12">
    <a href={`/${lang}/projects`} class="text-sm text-[var(--color-muted)] hover:text-[var(--color-fg)]">← {t('projects','title', lang)}</a>
    <article class="mt-6 space-y-10">
      <header class="space-y-4">
        <h1 class="text-3xl font-semibold leading-tight">{project.title}</h1>
        <p class="text-lg text-[var(--color-muted)]">{project.tagline}</p>
        <div class="flex flex-wrap gap-4 text-xs text-[var(--color-muted)]">
          <span>{t('projects','card_year', lang)}: {project.year}</span>
          <span>{t('projects','card_stack', lang)}: {project.tech.join(', ')}</span>
        </div>
      </header>

      <div class="overflow-hidden rounded-3xl border border-[var(--color-border)]">
        <img src={project.image} alt={project.imageAlt} loading="lazy" class="h-80 w-full object-cover" />
      </div>

      <section class="grid gap-6 md:grid-cols-[2fr,1fr]">
        <div class="space-y-4 text-base text-[var(--color-muted)] leading-relaxed">
          <p>{project.summary}</p>
          <p>{project.description}</p>
        </div>
        <aside class="card space-y-4 p-5 text-sm text-[var(--color-muted)]">
          <h2 class="text-base font-semibold text-[var(--color-fg)]">{t('projects','card_outcomes', lang)}</h2>
          <ul class="space-y-2 list-disc pl-5">
            {project.outcomes.map((outcome) => (
              <li>{outcome}</li>
            ))}
          </ul>
          <div class="space-y-2">
            {project.links.map((link) => (
              <a href={link.href} class="flex items-center gap-2 text-[var(--color-primary)]" target={link.href.startsWith('http') ? '_blank' : '_self'} rel="noopener">{link.label} →</a>
            ))}
          </div>
        </aside>
      </section>
    </article>

    <Footer lang={lang} />
  </main>
</Base>

