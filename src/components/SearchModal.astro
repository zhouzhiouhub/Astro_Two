---
import { t, type Locale } from "@/lib/i18n";
const { lang } = Astro.props as { lang: Locale };
---
<div id="search-overlay" class="fixed inset-0 hidden z-[1000]">
  <div id="search-backdrop" class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>
  <div class="relative mx-auto mt-24 w-[92%] max-w-3xl rounded-lg border border-[var(--color-border)] bg-[var(--color-bg)] shadow-lg">
    <div class="flex items-center justify-between px-4 py-3 border-b border-[var(--color-border)]">
      <div class="text-sm text-[var(--color-muted)]">{t('common','search', lang)}</div>
      <button id="search-close" aria-label="Close" class="text-[var(--color-muted)] hover:text-[var(--color-fg)]">âœ•</button>
    </div>
    <div id="pagefind-search" class="p-3"></div>
    <div id="search-status" class="px-4 pb-4 text-xs text-[var(--color-muted)] hidden"></div>
  </div>
</div>

<script>
  const overlay = document.getElementById('search-overlay');
  const closeBtn = document.getElementById('search-close');
  const backdrop = document.getElementById('search-backdrop');
  const container = document.getElementById('pagefind-search');
  const status = document.getElementById('search-status');
  let uiInitialized = false;

  function showOverlay() { overlay?.classList.remove('hidden'); }
  function hideOverlay() { overlay?.classList.add('hidden'); }

  async function ensurePagefindUI(currentLang){
    if (uiInitialized) return;
    try {
      // Load UI assets if present (generated by Pagefind --bundle)
      await Promise.all([
        loadCss('/pagefind/pagefind-ui.css'),
        loadScript('/pagefind/pagefind-ui.js')
      ]);
      // Initialize Pagefind UI
      // Filter results to current language when available
      // Pagefind exposes a special `language` filter from <html lang="..">
      // If the filter field doesn't exist yet (e.g., dev server), UI still works without filters
      const opts = { element: "#pagefind-search", showImages: false };
      try { opts.filters = { language: currentLang }; } catch (_) {}
      // @ts-ignore
      new window.PagefindUI(opts);
      uiInitialized = true;
      status?.classList.add('hidden');
    } catch (err) {
      // Dev mode or missing index: show a helpful hint
      if (status) {
        status.textContent = `${t('common','search', lang)} index not found. Build the site to enable search.`;
        status.classList.remove('hidden');
      }
    }
  }

  function loadScript(src){
    return new Promise((resolve, reject)=>{
      const s = document.createElement('script'); s.src = src; s.async = true;
      s.onload = resolve; s.onerror = reject; document.body.appendChild(s);
    });
  }
  function loadCss(href){
    return new Promise((resolve, reject)=>{
      const l = document.createElement('link'); l.rel = 'stylesheet'; l.href = href;
      l.onload = resolve; l.onerror = reject; document.head.appendChild(l);
    });
  }

  function openSearch(currentLang){ showOverlay(); ensurePagefindUI(currentLang); }

  // Listen for the custom event dispatched by SearchButton
  // Avoid TypeScript-only casts in client JS
  window.addEventListener('open-search', (ev) => {
    const detail = (ev && typeof ev === 'object' && 'detail' in ev && ev.detail) ? ev.detail : {};
    openSearch(detail.lang || 'en');
  });
  closeBtn?.addEventListener('click', hideOverlay);
  backdrop?.addEventListener('click', hideOverlay);
  window.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') hideOverlay(); });
</script>
